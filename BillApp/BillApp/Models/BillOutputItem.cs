using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BillApp.Models
{
    class BillOutputItem
    {
        public int id;                 // Supplier No(ETN)             // 51344            // NOT DEFINED
        public int invoice;            // Invoice No.                  // 385              // Bill.GetInvoice()
        public DateTime date;          // Invoice date                 // 23-11-2018       // Bill.date
        public Double billTotal;       // Total value invoice          // 18.873,33        // Bill.total
        public int itemId;             // Item                         // 10               // AUTOGENERATED FROM 10 IN STEPS OF 10 (10, 20, 30, ...)
        public String pn;              // Article No                   // 81391436104      // OrderListItem.GetSimplifiedPN()
        public int quantity;           // Quantity                     // 1                // OrderListItem.quantity
        public Double unitPrice;       // Price                        // 1241,2           // BillItem.unitPrice
        public int supplierOrder;      // Supplier Order No            // 108              // OrderList.GetSupplierOrder()
        public String packCode;        // Picket No (Barcode of Box)   // 91811210829      // OrderListItem.packetCode
        public String billCode;        // BL                           // FRGSF0000385     // Bill.code

        public BillOutputItem(Bill bill, OrderList order, String pc, String pn, int id, int item)
        {
            this.id = id;
            this.invoice = bill.GetInvoice();
            this.date = bill.date;
            this.billTotal = bill.total;
            this.itemId = item;
            String orderPN = pn;
            String fullPN = "";
            try
            {
                fullPN = bill.items.Find(i => i.ValidPN(orderPN)).pn;
                this.pn = bill.items.Find(i => i.ValidPN(orderPN)).GetSimplifiedPN(); // Link between files
                this.quantity = order.items.Find(o => o.packetCode.Equals(pc) && o.pn.Equals(fullPN)).quantity;
            }
            catch (Exception)
            {
                this.pn = null;
            }

            this.unitPrice = (this.pn != null) ? bill.items.Find(i => i.ValidPN(fullPN)).unitPrice : 0;
            this.supplierOrder = order.GetSupplierOrder();
            this.packCode = pc;
            this.billCode = bill.code;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("----------------------------------\n");
            sb.Append("ID: " + this.id + "\t\t\t");
            sb.Append("Invoice: " + this.invoice + "\n");
            sb.Append("Date: " + this.date.ToShortDateString() + "\t\t");
            sb.Append("Bill Total: " + this.billTotal + "\n");
            sb.Append("Item ID: " + this.itemId + "\t\t");
            sb.Append("Part Number: " + this.pn + "\n");
            sb.Append("Quantity: " + this.quantity + "\t\t");
            sb.Append("Unit Price: " + this.unitPrice + "\n");
            sb.Append("Supplier Order: " + this.supplierOrder + "\t");
            sb.Append("Packet Code: " + this.packCode + "\n");
            sb.Append("Bill Code: " + this.billCode + "\n");
            return sb.ToString();
        }

        public static void ExportOutput(Bill bill, List<OrderList> orders, String path, View view)
        {
            view.StatusUpdate("Loading Output");
            List<BillOutputItem> output = BillOutputItem.LoadOutput(bill, orders);

            using (ExcelUtil eu = new ExcelUtil(Utils.GetOutputTemplate()))
            {
                int line = 1;
                eu.SelectWorksheet(1);
                int itemCount = output.Count;
                int count = 0;
                foreach (BillOutputItem item in output)
                {
                    view.StatusUpdate("Exporting Output - Sheet I (" + ++count + " of " + itemCount + ")");
                    if (item.pn != null)
                    {
                        Object[] datas = { item.id, item.invoice, item.date, item.billTotal,
                                           item.itemId, item.pn, item.quantity, item.unitPrice,
                                           item.supplierOrder, item.packCode, item.billCode };
                        eu.WriteRow(line++, 0, datas);
                    }
                }

                line = 1;
                eu.SelectWorksheet(2);
                itemCount = bill.items.Count;
                count = 0;
                foreach (BillItem item in bill.items)
                {
                    view.StatusUpdate("Exporting Output - Sheet II (" + ++count + " of " + itemCount + ")");
                    Object[] datas = { bill.code, bill.date, bill.total, item.quantity,
                                       item.pn, item.unitPrice, item.amount, item.discount,
                                       item.total, item.GetStatus(bill, orders)};
                    eu.WriteRow(line++, 0, datas);
                }

                line = 1;
                eu.SelectWorksheet(3);
                itemCount = orders.Count;
                count = 0;
                foreach (OrderList order in orders)
                {
                    view.StatusUpdate("Exporting Output - Sheet III (" + ++count + " of " + itemCount + ")");
                    foreach (OrderListItem item in order.items)
                    {
                        Object[] datas = { order.id, order.date, order.incoterm,
                                           item.packetCode, item.pn, item.quantity,
                                           item.GetStatus(bill) };
                        eu.WriteRow(line++, 0, datas);
                    }
                }

                eu.SaveAs(path);
            }
        }

        public static List<BillOutputItem> LoadOutput(Bill bill, List<OrderList> orders)
        {
            List<BillOutputItem> output = new List<BillOutputItem>();
            int itemId = 10;
            foreach (OrderList order in orders)
            {
                foreach (OrderListItem item in order.items)
                {
                    output.Add(new BillOutputItem(bill, order, item.packetCode, item.pn, 51344, itemId));
                    itemId += 10;
                }
            }
            return output;
        }
    }
}
